result is <ref *1> Sequelize {
  options: {
    dialect: 'postgres',
    dialectModulePath: null,
    host: 'tai.db.elephantsql.com',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    standardConformingStrings: true,
    logging: [Function: log],
    omitNull: false,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    hooks: {},
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    operatorsAliases: true
  },
  config: {
    database: 'ikpbedjz',
    username: 'ikpbedjz',
    password: 'RWhIPn_D8KEv1Lyc-bPpugw-1RH41fUo',
    host: 'tai.db.elephantsql.com',
    port: 5432,
    pool: {},
    protocol: 'tcp',
    native: false,
    ssl: undefined,
    replication: false,
    dialectModulePath: null,
    keepDefaultTimezone: undefined,
    dialectOptions: undefined
  },
  dialect: <ref *2> PostgresDialect {
    sequelize: [Circular *1],
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [Circular *2],
      versionPromise: [Promise [Object]],
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      oidMap: [Object],
      arrayOidMap: [Object]
    },
    QueryGenerator: {
      options: [Object],
      dialect: 'postgres',
      setSearchPath: [Function: setSearchPath],
      createSchema: [Function: createSchema],
      dropSchema: [Function: dropSchema],
      showSchemasQuery: [Function: showSchemasQuery],
      versionQuery: [Function: versionQuery],
      createTableQuery: [Function: createTableQuery],
      dropTableQuery: [Function: dropTableQuery],
      showTablesQuery: [Function: showTablesQuery],
      describeTableQuery: [Function: describeTableQuery],
      _checkValidJsonStatement: [Function: _checkValidJsonStatement],
      jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
      handleSequelizeMethod: [Function: handleSequelizeMethod],
      addColumnQuery: [Function: addColumnQuery],
      removeColumnQuery: [Function: removeColumnQuery],
      changeColumnQuery: [Function: changeColumnQuery],
      renameColumnQuery: [Function: renameColumnQuery],
      fn: [Function: fn],
      exceptionFn: [Function: exceptionFn],
      upsertQuery: [Function: upsertQuery],
      deleteQuery: [Function: deleteQuery],
      showIndexesQuery: [Function: showIndexesQuery],
      showConstraintsQuery: [Function: showConstraintsQuery],
      removeIndexQuery: [Function: removeIndexQuery],
      addLimitAndOffset: [Function: addLimitAndOffset],
      attributeToSQL: [Function: attributeToSQL],
      deferConstraintsQuery: [Function: deferConstraintsQuery],
      setConstraintQuery: [Function: setConstraintQuery],
      setDeferredQuery: [Function: setDeferredQuery],
      setImmediateQuery: [Function: setImmediateQuery],
      attributesToSQL: [Function: attributesToSQL],
      createTrigger: [Function: createTrigger],
      dropTrigger: [Function: dropTrigger],
      renameTrigger: [Function: renameTrigger],
      createFunction: [Function: createFunction],
      dropFunction: [Function: dropFunction],
      renameFunction: [Function: renameFunction],
      databaseConnectionUri: [Function: databaseConnectionUri],
      pgEscapeAndQuote: [Function: pgEscapeAndQuote],
      expandFunctionParamList: [Function: expandFunctionParamList],
      expandOptions: [Function: expandOptions],
      decodeTriggerEventType: [Function: decodeTriggerEventType],
      triggerEventTypeIsConstraint: [Function: triggerEventTypeIsConstraint],
      expandTriggerEventSpec: [Function: expandTriggerEventSpec],
      pgEnumName: [Function: pgEnumName],
      pgListEnums: [Function: pgListEnums],
      pgEnum: [Function: pgEnum],
      pgEnumAdd: [Function: pgEnumAdd],
      pgEnumDrop: [Function: pgEnumDrop],
      fromArray: [Function: fromArray],
      padInt: [Function: padInt],
      dataTypeMapping: [Function: dataTypeMapping],
      quoteIdentifier: [Function: quoteIdentifier],
      getForeignKeysQuery: [Function: getForeignKeysQuery],
      _getForeignKeyReferencesQueryPrefix: [Function: _getForeignKeyReferencesQueryPrefix],
      getForeignKeyReferencesQuery: [Function: getForeignKeyReferencesQuery],
      getForeignKeyReferenceQuery: [Function: getForeignKeyReferenceQuery],
      dropForeignKeyQuery: [Function: dropForeignKeyQuery],
      setAutocommitQuery: [Function: setAutocommitQuery],
      _templateSettings: [Object],
      extractTableDetails: [Function: extractTableDetails],
      addSchema: [Function: addSchema],
      renameTableQuery: [Function: renameTableQuery],
      insertQuery: [Function: insertQuery],
      bulkInsertQuery: [Function: bulkInsertQuery],
      updateQuery: [Function: updateQuery],
      arithmeticQuery: [Function: arithmeticQuery],
      nameIndexes: [Function: nameIndexes],
      addIndexQuery: [Function: addIndexQuery],
      addConstraintQuery: [Function: addConstraintQuery],
      getConstraintSnippet: [Function: getConstraintSnippet],
      removeConstraintQuery: [Function: removeConstraintQuery],
      quoteTable: [Function: quoteTable],
      quote: [Function: quote],
      quoteIdentifiers: [Function: quoteIdentifiers],
      escape: [Function: escape],
      selectQuery: [Function: selectQuery],
      escapeAttributes: [Function: escapeAttributes],
      generateInclude: [Function: generateInclude],
      generateJoin: [Function: generateJoin],
      generateThroughJoin: [Function: generateThroughJoin],
      _generateSubQueryFilter: [Function: _generateSubQueryFilter],
      _getRequiredClosure: [Function: _getRequiredClosure],
      getQueryOrders: [Function: getQueryOrders],
      selectFromTableFragment: [Function: selectFromTableFragment],
      setIsolationLevelQuery: [Function: setIsolationLevelQuery],
      generateTransactionId: [Function: generateTransactionId],
      startTransactionQuery: [Function: startTransactionQuery],
      commitTransactionQuery: [Function: commitTransactionQuery],
      rollbackTransactionQuery: [Function: rollbackTransactionQuery],
      whereQuery: [Function: whereQuery],
      whereItemsQuery: [Function: whereItemsQuery],
      OperatorMap: [Object],
      OperatorsAliasMap: [Object],
      setOperatorsAliases: [Function: setOperatorsAliases],
      whereItemQuery: [Function: whereItemQuery],
      _findField: [Function: _findField],
      _replaceAliases: [Function: _replaceAliases],
      _whereGroupBind: [Function: _whereGroupBind],
      _whereBind: [Function: _whereBind],
      _whereJSON: [Function: _whereJSON],
      _traverseJSON: [Function: _traverseJSON],
      _toJSONValue: [Function: _toJSONValue],
      _castKey: [Function: _castKey],
      _getJsonCast: [Function: _getJsonCast],
      _joinKeyValue: [Function: _joinKeyValue],
      _getSafeKey: [Function: _getSafeKey],
      _prefixKey: [Function: _prefixKey],
      _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
      getWhereConditions: [Function: getWhereConditions],
      parseConditionObject: [Function: parseConditionObject],
      isIdentifierQuoted: [Function: isIdentifierQuoted],
      booleanValue: [Function: booleanValue],
      _dialect: [Circular *2],
      sequelize: [Circular *1],
      typeValidation: undefined
    }
  },
  queryInterface: QueryInterface {
    sequelize: [Circular *1],
    QueryGenerator: {
      options: [Object],
      dialect: 'postgres',
      setSearchPath: [Function: setSearchPath],
      createSchema: [Function: createSchema],
      dropSchema: [Function: dropSchema],
      showSchemasQuery: [Function: showSchemasQuery],
      versionQuery: [Function: versionQuery],
      createTableQuery: [Function: createTableQuery],
      dropTableQuery: [Function: dropTableQuery],
      showTablesQuery: [Function: showTablesQuery],
      describeTableQuery: [Function: describeTableQuery],
      _checkValidJsonStatement: [Function: _checkValidJsonStatement],
      jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
      handleSequelizeMethod: [Function: handleSequelizeMethod],
      addColumnQuery: [Function: addColumnQuery],
      removeColumnQuery: [Function: removeColumnQuery],
      changeColumnQuery: [Function: changeColumnQuery],
      renameColumnQuery: [Function: renameColumnQuery],
      fn: [Function: fn],
      exceptionFn: [Function: exceptionFn],
      upsertQuery: [Function: upsertQuery],
      deleteQuery: [Function: deleteQuery],
      showIndexesQuery: [Function: showIndexesQuery],
      showConstraintsQuery: [Function: showConstraintsQuery],
      removeIndexQuery: [Function: removeIndexQuery],
      addLimitAndOffset: [Function: addLimitAndOffset],
      attributeToSQL: [Function: attributeToSQL],
      deferConstraintsQuery: [Function: deferConstraintsQuery],
      setConstraintQuery: [Function: setConstraintQuery],
      setDeferredQuery: [Function: setDeferredQuery],
      setImmediateQuery: [Function: setImmediateQuery],
      attributesToSQL: [Function: attributesToSQL],
      createTrigger: [Function: createTrigger],
      dropTrigger: [Function: dropTrigger],
      renameTrigger: [Function: renameTrigger],
      createFunction: [Function: createFunction],
      dropFunction: [Function: dropFunction],
      renameFunction: [Function: renameFunction],
      databaseConnectionUri: [Function: databaseConnectionUri],
      pgEscapeAndQuote: [Function: pgEscapeAndQuote],
      expandFunctionParamList: [Function: expandFunctionParamList],
      expandOptions: [Function: expandOptions],
      decodeTriggerEventType: [Function: decodeTriggerEventType],
      triggerEventTypeIsConstraint: [Function: triggerEventTypeIsConstraint],
      expandTriggerEventSpec: [Function: expandTriggerEventSpec],
      pgEnumName: [Function: pgEnumName],
      pgListEnums: [Function: pgListEnums],
      pgEnum: [Function: pgEnum],
      pgEnumAdd: [Function: pgEnumAdd],
      pgEnumDrop: [Function: pgEnumDrop],
      fromArray: [Function: fromArray],
      padInt: [Function: padInt],
      dataTypeMapping: [Function: dataTypeMapping],
      quoteIdentifier: [Function: quoteIdentifier],
      getForeignKeysQuery: [Function: getForeignKeysQuery],
      _getForeignKeyReferencesQueryPrefix: [Function: _getForeignKeyReferencesQueryPrefix],
      getForeignKeyReferencesQuery: [Function: getForeignKeyReferencesQuery],
      getForeignKeyReferenceQuery: [Function: getForeignKeyReferenceQuery],
      dropForeignKeyQuery: [Function: dropForeignKeyQuery],
      setAutocommitQuery: [Function: setAutocommitQuery],
      _templateSettings: [Object],
      extractTableDetails: [Function: extractTableDetails],
      addSchema: [Function: addSchema],
      renameTableQuery: [Function: renameTableQuery],
      insertQuery: [Function: insertQuery],
      bulkInsertQuery: [Function: bulkInsertQuery],
      updateQuery: [Function: updateQuery],
      arithmeticQuery: [Function: arithmeticQuery],
      nameIndexes: [Function: nameIndexes],
      addIndexQuery: [Function: addIndexQuery],
      addConstraintQuery: [Function: addConstraintQuery],
      getConstraintSnippet: [Function: getConstraintSnippet],
      removeConstraintQuery: [Function: removeConstraintQuery],
      quoteTable: [Function: quoteTable],
      quote: [Function: quote],
      quoteIdentifiers: [Function: quoteIdentifiers],
      escape: [Function: escape],
      selectQuery: [Function: selectQuery],
      escapeAttributes: [Function: escapeAttributes],
      generateInclude: [Function: generateInclude],
      generateJoin: [Function: generateJoin],
      generateThroughJoin: [Function: generateThroughJoin],
      _generateSubQueryFilter: [Function: _generateSubQueryFilter],
      _getRequiredClosure: [Function: _getRequiredClosure],
      getQueryOrders: [Function: getQueryOrders],
      selectFromTableFragment: [Function: selectFromTableFragment],
      setIsolationLevelQuery: [Function: setIsolationLevelQuery],
      generateTransactionId: [Function: generateTransactionId],
      startTransactionQuery: [Function: startTransactionQuery],
      commitTransactionQuery: [Function: commitTransactionQuery],
      rollbackTransactionQuery: [Function: rollbackTransactionQuery],
      whereQuery: [Function: whereQuery],
      whereItemsQuery: [Function: whereItemsQuery],
      OperatorMap: [Object],
      OperatorsAliasMap: [Object],
      setOperatorsAliases: [Function: setOperatorsAliases],
      whereItemQuery: [Function: whereItemQuery],
      _findField: [Function: _findField],
      _replaceAliases: [Function: _replaceAliases],
      _whereGroupBind: [Function: _whereGroupBind],
      _whereBind: [Function: _whereBind],
      _whereJSON: [Function: _whereJSON],
      _traverseJSON: [Function: _traverseJSON],
      _toJSONValue: [Function: _toJSONValue],
      _castKey: [Function: _castKey],
      _getJsonCast: [Function: _getJsonCast],
      _joinKeyValue: [Function: _joinKeyValue],
      _getSafeKey: [Function: _getSafeKey],
      _prefixKey: [Function: _prefixKey],
      _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
      getWhereConditions: [Function: getWhereConditions],
      parseConditionObject: [Function: parseConditionObject],
      isIdentifierQuoted: [Function: isIdentifierQuoted],
      booleanValue: [Function: booleanValue],
      _dialect: [PostgresDialect],
      sequelize: [Circular *1],
      typeValidation: undefined
    }
  },
  models: {},
  modelManager: ModelManager { models: [], sequelize: [Circular *1] },
  connectionManager: <ref *3> ConnectionManager {
    sequelize: [Circular *1],
    config: {
      database: 'ikpbedjz',
      username: 'ikpbedjz',
      password: 'RWhIPn_D8KEv1Lyc-bPpugw-1RH41fUo',
      host: 'tai.db.elephantsql.com',
      port: undefined,
      pool: [Object],
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined,
      user: 'ikpbedjz'
    },
    dialect: <ref *2> PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [Circular *3],
      QueryGenerator: [Object]
    },
    versionPromise: Promise [Object] {
      _bitField: 1,
      _fulfillmentHandler0: [Function (anonymous)],
      _rejectionHandler0: undefined,
      _promise0: [Promise [Object]],
      _receiver0: undefined
    },
    dialectName: 'postgres',
    pool: Pool {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      _config: [PoolOptions],
      _Promise: [Function],
      _factory: [Object],
      _draining: false,
      _started: false,
      _waitingClientsQueue: [PriorityQueue],
      _factoryCreateOperations: Set(0) {},
      _factoryDestroyOperations: Set(0) {},
      _availableObjects: [Deque],
      _testOnBorrowResources: Set(0) {},
      _testOnReturnResources: Set(0) {},
      _validationOperations: Set(0) {},
      _allObjects: Set(0) {},
      _resourceLoans: Map(0) {},
      _evictionIterator: [DequeIterator],
      _evictor: DefaultEvictor {},
      _scheduledEviction: null,
      [Symbol(kCapture)]: false
    },
    lib: PG {
      defaults: [Object],
      Client: [Function],
      Query: [Function: Query],
      Pool: [Function: BoundPool],
      _pools: [],
      Connection: [Function: Connection],
      types: [Object],
      native: [Getter]
    },
    oidMap: {
      '16': [Function (anonymous)],
      '23': [Function (anonymous)],
      '1082': [Function (anonymous)],
      '1700': [Function (anonymous)],
      '3904': [Function (anonymous)],
      '3906': [Function (anonymous)],
      '3908': [Function (anonymous)],
      '3910': [Function (anonymous)],
      '3912': [Function (anonymous)],
      '3926': [Function (anonymous)]
    },
    arrayOidMap: {
      '1000': [Function (anonymous)],
      '1007': [Function (anonymous)],
      '1182': [Function (anonymous)],
      '1231': [Function (anonymous)],
      '3905': [Function (anonymous)],
      '3907': [Function (anonymous)],
      '3909': [Function (anonymous)],
      '3911': [Function (anonymous)],
      '3913': [Function (anonymous)],
      '3927': [Function (anonymous)]
    }
  },
  importCache: {},
  test: {
    _trackRunningQueries: false,
    _runningQueries: 0,
    trackRunningQueries: [Function: trackRunningQueries],
    verifyNoRunningQueries: [Function: verifyNoRunningQueries]
  }
}



